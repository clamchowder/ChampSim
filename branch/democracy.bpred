#include "ooo_cpu.h"

#define LOCAL_HISTORY_LENGTH 12
#define LOCAL_HISTORY_COUNTERS (1 << LOCAL_HISTORY_LENGTH)
#define LOCAL_HISTORY_MASK (LOCAL_HISTORY_COUNTERS - 1)

// must be power of 2
#define HISTORY_TABLE_SIZE 2048
int history_table[NUM_CPUS][HISTORY_TABLE_SIZE][LOCAL_HISTORY_COUNTERS];
int local_history_vector[NUM_CPUS][HISTORY_TABLE_SIZE];

#define GLOBAL_HISTORY_LENGTH 32
#define GLOBAL_HISTORY_MASK (1 << GLOBAL_HISTORY_LENGTH) - 1
#define GS_HISTORY_TABLE_SIZE 524288
int branch_history_vector[NUM_CPUS];
int gs_history_table[NUM_CPUS][GS_HISTORY_TABLE_SIZE]; 

// must be power of 2
#define BIMODAL_TABLE_SIZE 16384
int bimodal_table[NUM_CPUS][BIMODAL_TABLE_SIZE];

// must be power of 2
#define CHOICE_TABLE_SIZE 8192
int choice_table[NUM_CPUS][CHOICE_TABLE_SIZE];

void O3_CPU::initialize_branch_predictor()
{
    cout << "CPU " << cpu << " DYSFUNCTIONAL DEMOCRACY branch predictor:" << endl;
    cout << "  " << LOCAL_HISTORY_LENGTH << " local history bits, " << HISTORY_TABLE_SIZE << " entry local BHT" << endl;
    cout << "  " << GLOBAL_HISTORY_LENGTH << " global history bits, " << GS_HISTORY_TABLE_SIZE << " entry gshare BHT" << endl;
    cout << "  " << BIMODAL_TABLE_SIZE << " entry bimodal table" << endl;
    cout << "  " << CHOICE_TABLE_SIZE << " entry meta predictor" << endl;

    for(int i=0; i< HISTORY_TABLE_SIZE; i++) {
      local_history_vector[cpu][i] = 0;
      for (int j = 0; j < LOCAL_HISTORY_COUNTERS; j++)
        history_table[cpu][i][j] = 2; // 2 is slightly taken
    }
    
    branch_history_vector[cpu] = 0;
    for(int i=0; i<GS_HISTORY_TABLE_SIZE; i++)
      gs_history_table[cpu][i] = 2; // 2 is slightly taken 

    for(int i = 0;i < CHOICE_TABLE_SIZE; i++) 
      choice_table[cpu][i] = 0; // prefer majority vote

    for(int i = 0; i < BIMODAL_TABLE_SIZE; i++) 
      bimodal_table[cpu][i] = 0; // prefer not taken
}
unsigned int gs_table_hash(uint64_t ip, int bh_vector)
{
    unsigned int hash = ip^(ip>>GLOBAL_HISTORY_LENGTH)^(ip>>(GLOBAL_HISTORY_LENGTH*2))^bh_vector;
    hash = hash%GS_HISTORY_TABLE_SIZE;

    return hash;
}

int bht_hash(uint64_t ip){
  return ip & (HISTORY_TABLE_SIZE - 1);
}

int ct_hash(uint64_t ip) {
  return ip & (CHOICE_TABLE_SIZE - 1);
}

int bimodal_hash(uint64_t ip) {
  return ip & (BIMODAL_TABLE_SIZE - 1);
}

uint8_t bimodal_prediction(uint64_t ip, uint32_t cpu) {
  int bimodal_index = bimodal_hash(ip);
  if (bimodal_table[cpu][bimodal_index] >= 2)
    return 1;
  return 0;
}

uint8_t local_prediction(uint64_t ip, uint32_t cpu) {
    int ip_hash = bht_hash(ip);
    int vector = local_history_vector[cpu][ip_hash];

    // index into history table with low bits of IP
    // then use history vector to select a counter
    if(history_table[cpu][ip_hash][vector] >= 2)
        return 1;

    return 0;
}

uint8_t global_prediction(uint64_t ip, uint32_t cpu) {
    int gs_hash = gs_table_hash(ip, branch_history_vector[cpu]);

    if(gs_history_table[cpu][gs_hash] >= 2)
        return 1;

    return 0;
}

uint8_t O3_CPU::predict_branch(uint64_t ip)
{
    int prediction = 0;

    prediction += global_prediction(ip, cpu);
    prediction += local_prediction(ip, cpu);
    prediction += bimodal_prediction(ip, cpu);
    if (prediction >= 2) prediction = 1;
    else prediction = 0;

    // meta predictor now predicts whether to agree or disagree with the vote
    int ct_index = ct_hash(ip);
    int choice = choice_table[cpu][ct_index];
    if (choice < 2) prediction = !prediction;

    return prediction;
}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken)
{
    // did majority vote work?
    int local_pred = local_prediction(ip, cpu);
    int global_pred = global_prediction(ip, cpu);
    int bimodal_pred = bimodal_prediction(ip, cpu);
    int vote = (local_pred + global_pred + bimodal_pred) >= 2;

    int ct_index = ct_hash(ip);
    // increment counter if vote was good
    if ((vote == taken) && (choice_table[cpu][ct_index] < 3))
      choice_table[cpu][ct_index]++;
    // decrement counter otherwise
    else if ((vote != taken) && choice_table[cpu][ct_index] > 0)
      choice_table[cpu][ct_index]--;

    // update both predictors, starting with local history
    int ip_hash = bht_hash(ip);
    int vector = local_history_vector[cpu][ip_hash];

    if(taken == 1) {
        if(history_table[cpu][ip_hash][vector] < 3)
            history_table[cpu][ip_hash][vector]++;
    } else {
        if(history_table[cpu][ip_hash][vector] > 0)
            history_table[cpu][ip_hash][vector]--;
    }

    local_history_vector[cpu][ip_hash] <<= 1;
    local_history_vector[cpu][ip_hash] &= LOCAL_HISTORY_MASK;
    local_history_vector[cpu][ip_hash] |= taken;

    // and update global history too
    int gs_hash = gs_table_hash(ip, branch_history_vector[cpu]);

    if(taken == 1) {
        if(gs_history_table[cpu][gs_hash] < 3)
            gs_history_table[cpu][gs_hash]++;
    } else {
        if(gs_history_table[cpu][gs_hash] > 0)
            gs_history_table[cpu][gs_hash]--;
    }

    branch_history_vector[cpu] <<= 1;
    branch_history_vector[cpu] &= GLOBAL_HISTORY_MASK;
    branch_history_vector[cpu] |= taken; 

    // update bimodal table
    int bimodal_index = bimodal_hash(ip);
    if (taken && bimodal_table[cpu][bimodal_index] < 3)
      bimodal_table[cpu][bimodal_index]++;
    else if (!taken && bimodal_table[cpu][bimodal_index] > 0)
      bimodal_table[cpu][bimodal_index]--;
}
